동적계획법

어원 
	multistage decision process 
	multistage & time-varying 
	코딩이 아니라, 계획법에 대한 의미.  
분할정복 vs 동적계획 
	- 분할정복
		나눠진 문제들 사이 상관관계가 없는 경우 적합 
		하향식(top down) 해결법
		피보나치 풀이등 할 때 비효율적 
	- 동적계획 
		풀이 순서 
			> 작은 문제 먼저 해결 
			> 인덱스 조정 중복 회피 
			> 작은 문제 해 모아 더 큰 문제 계산
		문제를 나눈 후 작은 문제 먼저 풀이 
		상향식(bottom-up) 해결법
		인덱스를 설정하여 작은 문제들의 중복풀이 배제  
		1. 재귀 관계식 정립 
		2. 작은 문제 먼저 풀이 , 상향식 
이항계수 구하기 
	- 분할정복 
		비효율적 
		nCk 계산 위해 2*nCk-1 소모 
	- 동적계획 
		Bij - B[i-1][j-1] + B[i-1][j]   when 0<j<i 
		    - 1 j=0 or j =1 
		수도코드에서도 작은 문제를 먼저 풀고, 마지막에 큰 문제 return 
		시간복잡도 nk에 비례 
최단경로 문제 
	- 그래프 용어 
		정점, 이음선, 방향, 가중치, 순환, 비순환, 길이 등 
	- brute-force algorithm (모든 경로 계산, 최소길이) 
		n-2개의 중간노드만 지나는 경우의 수만으로도 (n-2)! 임. 비효율적 
	- 동적계획식 
		
		W[i][j] - weight(i to j) / infinite (no connect) / 0 (i=j) 
		1. 재귀 관계식 정립
			D(k)[i][j] = min( D(k-1)[i][j] , D(k-1)[i][k]+D(k-1)[k][j] )
		2. k=1부터 n까지 이거 반복 
			D(0) ~ D(n) 
	- Floyd Algorithm 1  
		T(n) 
		추가 공간 필요 없는 이유 
	- Floyd Algorithm 2 
		P[i][j] 도입 
		path print 재귀 알고리즘 

동적계획법의 조건 
	- 동적계획법 설계 절차

	- 최적의 원칙 
		어떤 문제의 최적해는 그 부분 문제의 최적해를 포함해야 함.  
		except) 최장경로 문제 
			그 하부 문제들의 해가 최장경로 일부 문제의 답이 아님. 
		DP 로 풀기 위해서는 최적의 원칙에 부합하는지를 확인해야 함. 

연쇄 행렬곱셈 
	곱셈을 어떤 순서로 수행하느냐에 따라 행렬곱셈 횟수가 달라짐 

	- brute force alg 
		하나만 따로 뽑아도 남는 행렬의 개수는 n-1개임.  
		그런 식으로 그런 경우를 다 따지면 말도 안되는 time complexity 나옴 
		P(n) = C(n-1) 
		C(n) = (1/n+1)(2n  n)T  catalan number  
		n 개의 노드를 가진 이진트리가 만들어지는 경우의 수 
	
	- 최소곱셈(minimum multiplication) 알고리즘 DP 
		pesudo code check 
		
최적이진검색트리 
	키를 찾는데 걸리는 평균시간이 최소가 되로록 구축된 트리 
	한편, 키를 찾을 확률이 각기 다를 수 있음.  
	A[1][n] = min (A[1][k-1] + A[k+1][n]) + sigma pm  
	pseudo code
	시간복잡도 분석 

문자열 검색




















	