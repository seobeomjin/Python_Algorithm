ch1 - 알고리즘 효율, 분석 그리고 차수
---
(알고리즘 효율 안 들었음) 

알고리즘 분석 
	공간복잡도 / 시간복잡도 
	every-case / wort-case / average-case / best-case 
	case 별 시간 복잡도 연습 (배열덧셈 / 교환정렬 / 행렬곱셈 / 순차검색 등) 
차수 
	O( ), o( ), Ω( ), ω( ), Θ( )	
	차수의 주요 성질 (7가지) 
	극한을 이용한 small o 비교 
	알고리즘 복잡도와 컴퓨팅 능력
---
알고리즘 분석 (ch1 p65) 
	공간복잡도 / 시간복잡도 
	시간복잡도 (입력크기에 따라 단위연산(비교문, 지정문)이 몇 번 수행되는지)
	every-case / worst-case / average-case / best-case 
	우리의 관심은 "worst-case analysis" 
분석 case 별 시간 복잡도 연습 
ex. 배열덧셈 (누적으로) (시간복잡도 연습) - every-case 분석
	입력의 size에만 영향 받으므로  every-case 분석
	시간복잡도 분석 1) 단위연산 : "덧셈" 기준으로 -> T(n) = n 
	시간복잡도 분석 2) 단위연산 : "지정문(배정문)"기준으로 -> T(n) = n + n + 1
		(할당을 말하는 거인듯?) for에서 n번, result update마다 n, result=0에서 1 
ex. 교환정렬 - 비내림차순으로 n개의 키를 정렬하라. (시간복잡도 연습) - every-case 분석
	입력의 size에만 영향 받으므로  every-case 분석
	(for 문을 2개 설정하고, 각 범위별로 돌려서 크기 비교. 단위연산: "조건문(비교할 때)") 
	-> T(n) = (n-1)n/2
ex. 행렬곱셈 - every-case 분석
	입력의 size에만 영향 받으므로  every-case 분석 / 단위연산 : 가장 안쪽 for 루프에 있는 "곱셈" 
	-> T(n) = power(n,3) 

ex. 순차검색 - worst-case 분석
	입력값과 입력크기 모두에 종속이므로 worst-case 분석 / 단위연산 : 배열의 item과 key 비교연산
	W(n) = n / 데이터에 따라 시간복잡도가 달라질 수 있으므로 every-case X  
ex. 교환정렬 - worst-case 분석	
	단위연산 : 교환연산(exchange S[i] & S[j]) 
	최악의 경우, 입력 배열이 거꾸로 정렬되어 있는 경우 W(n) = (n-1)n/2

ex. 순차검색 - average-case 분석
	단위연산 : 비교 / 입력크기 n / 배열의 아이템 모두 다르다 가정, x가 k번째 있을 확률은 1/n (1<=k<=n) 
	x가 배열 S 안에 있는 경우 : A(n) = sigma k*(1/n), k is from 1 to n = (n+1)/2 
 	x가 배열 S 안에 없는 경수 : x in S 확률 p , x not in S 확률 1-p 
				->  A(n) = sigma k*(p/n) + n(1-p) = n(1-p/2) + p/2

ex. 순차검색 - best-case 분석
	단위연산 : 비교 / B(n) = 1  

경우에 따라 분석 방법이 다르나, 최악의 경우를 주로 고려해야 함. 
정확한 알고리즘은 어떤 입력에 대해서도 답을 출력하며 멈추는 알고리즘. 
의도한 대로 풀었는지, 유한시간 내에 종료하는지 판단해야 함.  

차수 (order) (ch1 p82) 
	복잡도 함수를 구분짓는 척도 / 단위연산을 얼마나 하는지. / lgn, n, nlgn, n^2, n^3, exp, n!, n^n 
	높은 차수항이 복잡도 함수를 궁극적으로 지배한다. / 복잡도 낮게 짜자
	Asymptotic(점근적) Behavoir : n이 큰 수가 될때 함수f(n)이 갖는 특성 

복잡도 함수 표기 - O( ), o( ), Ω( ), ω( ), Θ( )
big O - 점근적상한(asymptotic upper bound)
	O(f(n)) = {g(n): there exist positive constants c and N such that 0≤ g(n) ≤ c × f(n) for all n ≥ N}
	g(n) ∈Ο(f(n)) 
		어떤 임의의 N값보다 큰 n에 대해서 어떤 2차함수 cn^2보다는 작은 값을 가진다. 
		-> g(n) 은 어떤 2차함수 cn^2보다는 좋다. 
	 시간복잡도가 Ο(f(n)) 이면 
		아무리 늦어도 수행시간이 cf(n)은 된다. (cf(n)이 점근적 상한이다.) 
	Q) n2+10n ∈Ο(n^2) ?
		어떤 실수 c와 양의 정수 N의 조합으로 보일 수만 있으면 만족함. 다양한 조합이 가능. 
	Ο(n^2)은 어떤 함수들의 집함임. 위의 조건을 만족하는. 
		5n2 ∈Ο(n^2) / T (n)=n*(n-1)/2∈Ο(n^2) / n2 ∈Ο(n^2+10n) / n ∈Ο(n^2) / 
		n^3 ∉ Ο(n^2) 

Ω - 점근적 하한(asymptotic lower bound)
	Ω(f(n)) ={g(n): there exist positive constants c and Nsuch that g(n) ≥ c × f(n) ≥ 0 for all n ≥ N}
	big O 와 반대  
	g(n) ∈ Ω(f(n^2)) 
		어떤 임의의 N 값보다 큰 n에 대해서 어떤 2차함수 cn^2의 값보다 큰 값을 가진다. 
		-> g(n) 은 어떤 2차함수 cn^2보다는 나쁘다.
	 시간복잡도가 Ω(f(n)) 이면 
		아무리 빨라도 수행시간이 cf(n)밖에 되지 않는다. (cf(n)이 점근적 하한이다.) 
	n^2 +10n ∈ Ω(n^2) ?   /   5n^2 ∈ Ω(n^2) ? 

Θ - asymptotic tight bound
	Θ(f(n))= O(f(n))∩ Ω(f(n)) 
	n ≥ N인 모든 정수 n 에 대해서 c × f(n) ≤ g(n) ≤ d × f(n)이 성립하는 양의 실수 c와 d, 
	음이 아닌 정수 N이 존재한다.
	Θ(f(n))={g(n): there exist positive constants c, d, and Nsuch that c × f(n) ≤ g(n) ≤ d × f(n) for all n ≥ N}
	 g(n) ∈ Θ(f(n)) = “g(n)은 f(n)의차수(order)”

o (small o) 
	복잡도 함수끼리의 관게를 나타내기 위한 표기법 
	모든 양의 실수 c에 대해, n ≥ N인 모든 n 에 대해서 0≤g(n)≤c×f(n) 이 성립하는 음이 아닌 정수 N이 존재한다.
	o(f(n))={g(n): for any positive constants c>0, there exists a constant N>0 
	such that 0 ≤ g(n) ≤ c × f(n) for all n ≥ N}
	g(n) ∈o(f(n)) = " g(n)은 f(n)의작은오(o) ” / lim n goes infinite , g(n) / f(n) = 0 , f(n)이 매우 큼  
	O 는 c>0 중 하나만 , o 는 모든 실수 c > 0 에 대해 성립 
 
ω (small omega) (lower bound that is not asymptotically tight)
	ω (f(n))={ g(n): for any positive constant c > 0, there exists a constant N > 0 
	such that 0 ≤ c × f(n) ≤ g(n) for all n ≥ N}
	small o 와 역의 관계임. 
	g(n) ∈ω(f(n)) = " g(n)은 f(n)의 작은 오메가 ” / lim n goes infinite , g(n) / f(n) = infinite , g(n)이 매우 큼

차수의 주요 성질 
	1. g(n) ∈O(f(n)) <=>  f(n) ∈Ω(g(n)) 
	2. g(n) ∈Θ(f(n)) <=>  f(n) ∈Θ(g(n)) 
	3. b > 1이고 a > 1이면, loga n ∈ Θ(logb n) , "log 복잡도"는 모두 동일한 카테고리 
	4. b > a > 0이면, an ∈ o(bn) , "지수 복잡도"는 모두 동일한 카테고리 
	5. a > 0인모든 a에대해서, a^n ∈ o(n!), n!은 어떤 지수함수보다도 나쁘다. 
	6. Θ(lgn) Θ(n) Θ(nlgn) Θ(n^2) Θ(n^k) Θ(n^k) Θ(a^n) Θ(b^n) Θ(n!)  
	7.  c>=0, d>=0, g(n)∈O(f(n)) and , h(n)∈Θ(f(n)) => c*g(n) + d*h(n) ∈Θ(f(n))

극한을 이용한 small o 비교 
	lim n->∞, g/f -> c = g Θf
	lim n->∞, g/f -> 0 = g of
	lim n->∞, g/f -> ∞ = f og 
	로피탈 이용 
알고리즘 복잡도와 컴퓨팅 능력  
	복잡도가 f(n)인 알고리즘에 컴퓨팅 능력이 k배 증가한다고 할 때, 풀 수 있는 문제 수의 증가량은? 
	기존에 f(n)= m이라고 할 때, k*f(n) = m+x 에서 x는 몇일까? 총 m+x 문제 풀이 